// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/repository/repository.go

// Package testdata is a generated GoMock package.
package testdata

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/mashmorsik/L0/pkg/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddDeliveryTx mocks base method.
func (m *MockRepository) AddDeliveryTx(tx *sql.Tx, o models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDeliveryTx", tx, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDeliveryTx indicates an expected call of AddDeliveryTx.
func (mr *MockRepositoryMockRecorder) AddDeliveryTx(tx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDeliveryTx", reflect.TypeOf((*MockRepository)(nil).AddDeliveryTx), tx, o)
}

// AddOrderItemsTx mocks base method.
func (m *MockRepository) AddOrderItemsTx(tx *sql.Tx, o models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrderItemsTx", tx, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrderItemsTx indicates an expected call of AddOrderItemsTx.
func (mr *MockRepositoryMockRecorder) AddOrderItemsTx(tx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderItemsTx", reflect.TypeOf((*MockRepository)(nil).AddOrderItemsTx), tx, o)
}

// AddOrderTx mocks base method.
func (m *MockRepository) AddOrderTx(tx *sql.Tx, order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrderTx", tx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrderTx indicates an expected call of AddOrderTx.
func (mr *MockRepositoryMockRecorder) AddOrderTx(tx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderTx", reflect.TypeOf((*MockRepository)(nil).AddOrderTx), tx, order)
}

// AddPaymentTx mocks base method.
func (m *MockRepository) AddPaymentTx(tx *sql.Tx, o models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPaymentTx", tx, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPaymentTx indicates an expected call of AddPaymentTx.
func (mr *MockRepositoryMockRecorder) AddPaymentTx(tx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPaymentTx", reflect.TypeOf((*MockRepository)(nil).AddPaymentTx), tx, o)
}

// CreateOrder mocks base method.
func (m *MockRepository) CreateOrder(order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRepositoryMockRecorder) CreateOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRepository)(nil).CreateOrder), order)
}

// GetDeliveryInfo mocks base method.
func (m *MockRepository) GetDeliveryInfo(tx *sql.Tx, orderID string, model models.Order) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveryInfo", tx, orderID, model)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveryInfo indicates an expected call of GetDeliveryInfo.
func (mr *MockRepositoryMockRecorder) GetDeliveryInfo(tx, orderID, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveryInfo", reflect.TypeOf((*MockRepository)(nil).GetDeliveryInfo), tx, orderID, model)
}

// GetItemsInfo mocks base method.
func (m *MockRepository) GetItemsInfo(tx *sql.Tx, orderID string, model models.Order) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsInfo", tx, orderID, model)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsInfo indicates an expected call of GetItemsInfo.
func (mr *MockRepositoryMockRecorder) GetItemsInfo(tx, orderID, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsInfo", reflect.TypeOf((*MockRepository)(nil).GetItemsInfo), tx, orderID, model)
}

// GetOrderInfo mocks base method.
func (m *MockRepository) GetOrderInfo(tx *sql.Tx, orderID string, model models.Order) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderInfo", tx, orderID, model)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderInfo indicates an expected call of GetOrderInfo.
func (mr *MockRepositoryMockRecorder) GetOrderInfo(tx, orderID, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderInfo", reflect.TypeOf((*MockRepository)(nil).GetOrderInfo), tx, orderID, model)
}

// GetOrders mocks base method.
func (m *MockRepository) GetOrders() ([]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders")
	ret0, _ := ret[0].([]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockRepositoryMockRecorder) GetOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockRepository)(nil).GetOrders))
}

// GetOrdersIDTx mocks base method.
func (m *MockRepository) GetOrdersIDTx(tx *sql.Tx) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersIDTx", tx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersIDTx indicates an expected call of GetOrdersIDTx.
func (mr *MockRepositoryMockRecorder) GetOrdersIDTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersIDTx", reflect.TypeOf((*MockRepository)(nil).GetOrdersIDTx), tx)
}

// GetPaymentInfo mocks base method.
func (m *MockRepository) GetPaymentInfo(tx *sql.Tx, orderID string, model models.Order) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentInfo", tx, orderID, model)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentInfo indicates an expected call of GetPaymentInfo.
func (mr *MockRepositoryMockRecorder) GetPaymentInfo(tx, orderID, model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentInfo", reflect.TypeOf((*MockRepository)(nil).GetPaymentInfo), tx, orderID, model)
}
